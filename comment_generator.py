# -*- coding: utf-8 -*-
"""Comment_Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C02369Ye8oNrsKVDNSnzx15XCk5djowT
"""

from transformers import pipeline, set_seed
from flair.data import Sentence
from flair.models import SequenceTagger


class Comment_Generator:
        '''
          A class to generate and save comments to MongoDb.

          ...

          Attributes
          ----------
          topic_detector_model : Hugging Face Model
              zero-shot-classification to get comments topic
          comment_generator:Hugging Face Model
                gpt2 text-generation
          ner_model:SequenceTagger
              ner-english-ontonotes-large model for SequenceTagger
          coll : str
              Database collection name
          conn : MongoClient 
              MongoDB client connection
          db_name : str
              Database name

          Methods
          -------
          ner_extractor(ner_model=SequenceTagger.load("flair/ner-english-ontonotes-large"), comment="my comment"):
              extract entities that appear in the comment.
          topic_detector(topic_detector_model=pipeline('zero-shot-classification', model='facebook/bart-large-mnli'),comment="my comment")
              detect topic of the comment 
          generate_save_comment(num_comment=5,source_comment):
                generate new comments and save in database
        '''
        ner_model = SequenceTagger.load("flair/ner-english-ontonotes-large")
        topic_detector_model = pipeline('zero-shot-classification', model='facebook/bart-large-mnli')
        
        text_generator = pipeline('text-generation', model='gpt2')
        set_seed(42)

        def __init__(self,coll="", conn=pymongo.MongoClient("mongodb://localhost:27017/"), db_name='my_db'):
            """
              Constructs all the necessary attributes for the Comment_Generator object.

              Parameters
              ----------
                  coll : str
                      Database collection name
                  conn : MongoClient 
                      MongoDB client connection
                  db_name : str
                      Database name
            """
            self.db = conn[db_name]
            self.coll = self.db[coll]
        def save_data(self,data):
            """
                Save data to database
                Parameters
                ----------
                data : dict

                Returns
                -------
                None
            """
            self.coll.insert_one(data)

        # create ner_extractor static method
        @staticmethod
        def ner_extractor(comment):
            """
              Extract entities that appear in the comment

              Parameters
              ----------
              ner_model : SequenceTagger
                  ner-english-ontonotes-large model for SequenceTagger

              comment: str

              Returns
              -------
              extracted_entities
              a dictionary of values for every recognized entity for example {"Date":['d1','d2'],"PERSON":['p1','p2','p3']}
              recognized entity are below

              | entity      | meaning              |
              |-------------+----------------------|
              | CARDINAL    | cardinal value       |
              | DATE        | date value           |
              | EVENT       | event name           |
              | FAC         | building name        |
              | GPE         | geo-political entity |
              | LANGUAGE    | language name        |
              | LAW         | law name             |
              | LOC         | location name        |
              | MONEY       | money name           |
              | NORP        | affiliation          |
              | ORDINAL     | ordinal value        |
              | ORG         | organization name    |
              | PERCENT     | percent value        |
              | PERSON      | person name          |
              | PRODUCT     | product name         |
              | QUANTITY    | quantity value       |
              | TIME        | time value           |
              | WORK_OF_ART | name of work of art  |
              
              """
            
            # make example sentence
            sentence = Sentence(comment)

            # predict NER tags
            Comment_Generator.ner_model.predict(sentence)
            # save predicted NER 
            extracted_entities={}
            for entity in sentence.get_spans('ner'):
                entity_type=str(list(entity.labels)[0]).split(' ')[0]
                
                token_num=len(list(entity.tokens))
                #clean model output 
                cleaned_entity_tokens=[str(cet).split(' ')[2] for cet in list(entity.tokens)  ]
                recognized_entity=' '.join(cleaned_entity_tokens)

                #add to extracted_entities
                if entity_type in extracted_entities:
                  extracted_entities[entity_type].add(recognized_entity)
                else:
                  extracted_entities[entity_type]=set()
                  extracted_entities[entity_type].add(recognized_entity)

            return  extracted_entities 
        # create topic_detector static method
        @staticmethod
        def topic_detector( comment):
            """
                Detect topic of the comment

              Parameters
              ----------
              topic_detector : zero-shot-classification model
                  ner-english-ontonotes-large model for SequenceTagger

              comment: str

              Returns
              -------
              detect topic of the comment,topic categories are in ["artifacts", "animals", "food", "sport","technology",'travel', 'exploration', 'dancing', 'cooking']
            """
            labels = ["artifacts", "animals", "food", "sport","technology",'travel', 'exploration', 'dancing', 'cooking']
            hypothesis_template = 'This text is about {}.'
            predicted_topic = Comment_Generator.topic_detector_model(comment, labels, hypothesis_template=hypothesis_template, multi_class=True)['labels'][0]
            return predicted_topic  

         # create generate_comment static method
        def generate_comment(self,source_comment=""):
                  """
                      Generate new comments

                    Parameters
                    ----------
                    source_comment: str
                        primary comment

                    Returns
                    -------
                    None
                  """
                  #get ner
                  extracted_entities=Comment_Generator.ner_extractor(source_comment)
                  print("extracted_entities",extracted_entities)
                  # get topic
                  topic=Comment_Generator.topic_detector( source_comment)
                  print("topic",topic)
                  new_comments=[]
                  PERSON_LOC=""
                  PERSON_ORG=""
                  PERSON_DATE=""
                  set_seed(42)
                  if "PERSON" in extracted_entities:
                      # generate new comment base on entity combinations
                    if "GPE" in extracted_entities:
                         PERSON_LOC=list(extracted_entities["PERSON"])[0]+" "+list(extracted_entities["GPE"])[0]
                         new_comments+=Comment_Generator.text_generator(PERSON_LOC, max_length=30, num_return_sequences=3)
                    if "ORG" in extracted_entities:
                         PERSON_ORG=list(extracted_entities["PERSON"])[0]+" "+list(extracted_entities["ORG"])[0]
                         new_comments+=Comment_Generator.text_generator(PERSON_ORG, max_length=30, num_return_sequences=3)
                    if "DATE" in extracted_entities:
                       PERSON_DATE=list(extracted_entities["PERSON"])[0]+" "+list(extracted_entities["DATE"])[0]
                       new_comments+=Comment_Generator.text_generator(PERSON_DATE, max_length=30, num_return_sequences=3)

                 # saved data to database

                  for nc in new_comments:
                      data={"_id":nc['generated_text'],"topic":topic}
                      print(data)
                      try:
                         self.save_data(data)
                      except:
                         continue;



